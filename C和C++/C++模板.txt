C++类模板定义以及实例化

1、定义一个类模板：
template<class 模板参数>
class 类名{
	//类定义.....
};
	其中，template是声明类模板的关键字，表示声明一个模板，模板参数可以是一个，也可以是多个，
	可以是类型参数，也可以是非类型参数。类型参数由关键字class或typename及其后面的标识符构成。
	代表模板定义中的一个常量。
	例如：
	template<class type,int width>
	//type为类型参数，width为非类型参数
	class Graphics;
	注意：1.如果在全局域中声明了模板参数同名的变量，则该变量被隐藏掉。
			2.模板参数名不可以当做模板定义中类成员的名字。
			3.同一个模板参数名在模板参数表中只能出现一次。
			4.在不同的类模板或声明中，模板参数名可以被重复使用。
2、类模板实例化
	定义：从通用的类模板定义中生成类的过程称为模板实例化。
	类模板什么时候会被实例化？
	1。当使用了类模板实例的名字，并且上下文环境要求存在类的定义时。
	2。对象类型是一个类模板实例，当对象被定义时，此时被称作的实例化点。
	3。一个指针或引用指向一个类模板实例，当检查这个指针或引用所指的对象时。
	template<class Type>
	class Graphics{};
	void f1(Graphics<char>);//仅是一个函数声明，不需要实例化
	class Rect
	{
		Graphics<double>& rsd;//声明一个类模板引用，不需要实例化
		Graphics<int> si;//si是一个Graphics类型的对象，需要实例化类模板
	}
	
	int main()
	{
		Graphics<char>* sc;//仅声明一个类模板指针，不需要实例化
		f1(*sc);//需要实例化，因为传递给函数f1的是一个Graphics<int>对象。
		int iobj=sizeof(Graphics<string>);//需要实例化，因为sizeof会计算Graphics<string>
		//对象的大小，为了计算大小，编译器必须根据类模板定义产生改类型。
	}
	
	